---
layout: post
title:  "Leaks"
date:   2015-08-21 22:45:00
categories: iOS
---

###Leaks内存泄露调试无法定位到代码行

今天用leaks调试内存泄露问题，发现leaks无法定位到具体的代码行，如下图所示:
![](/images/Leaks/Leaks1.png)
只显示具体的符号地址,点击进入显示下图
![](/images/Leaks/Leaks2.png)
一时奇怪了，以前项目leaks调试的时候一直没遇到这样的问题。后来右击一看，发现有load dSYM文件的选项。一时想起来,不管外在的形式如何，只要涉及调试，都需要有调试信息，进行符号化后才可以定位到源代码。然后去build看了下，确实是工程未生成对应的dSYM文件，导致无法符号化。接着去看了下下工程的build setting设:	
	
	Generate Debug Symbols   = Yes 
	Debug Information Format = DWARF with dSYM File

工程中的第二个选择被设置成了DWARF,所以导致未生成dSYM文件。一般项目新建，默认是生成dSYM文件的。

dSYM文件是一种调试信息文件。基本上所有的编程语言(Python、html等语言除外，因为它们通常没有编译器),通过编译器生成中间语言或直接在机器上运行的机器码。而为了方便调试，比如常用的debug 断点调试、指令调试、奔溃日志分析等，都需要在原始代码和编译器编译后的代码之间存在映射关系的数据。而这种信息，就是调试信息所包含的数据。

在iOS开发中,Xcode使用的是LLDB(Lower Level Debugger)底层调试器，通过调试器，可以从dSYM这个调试文件中，将编译过的代码映射回源代码。

DWARF(Debugging With Attributed Record Formats)是一种存储的格式规范。dSYM文件就是按DWARF的格式存储映射关系。具体进入看看dSYM文件，它除了一个符合DWARF规范并以项目名称命名的文件外,还包含一个项目的Info.plist文件。其实不难理解，Xcode集成了符号化的功能，在我们进行Build And Archive 设置打包提交应用到AppStore后，通过直接将.crash文件进行**符号化**。XCode是如何找到对应的dSYM文件的呢?其实就是通过查找与奔溃文件符合的Info.plist文件,然后从对应的归档文件中中找到dSYM文件进行符号化。

所谓的**符号化**，其实就是使用方法名和变量名替换基地址的过程。我们知道，LLVM(Low Level Virtual Machine)编译器将源代码编译转换成了汇编语言。对汇编了解的同学可能都知道，所有的汇编代码都有一个基地址，是一个程序的入口，通常就是main方法。我们编写的方法、变量、用到的堆栈都是依赖于基地址。每次编译的程序,该基地址都会发生变化。

Instruments其实也是需要调试信息文件的。这也是我上面遇到无法符号化的问题所在。后来查了下资料，Instruments是使用Spotlight查找文件的。如果你硬盘访问权限出现问题时,也是会出现无法符号化的问题。

最后,推荐一个奔溃分析工具[bugHD](http://bughd.com/),分析定位问题比较方便的.